abcd efgh ijkl mn

z: output for each step
z_X: input for step X



== Block 0 ==

w = a
x = 0
x = z_0
x = z_0 % 26
z = z_0 / 1
x = (z_0 % 26) + 11
x = x != w
y = 0
y = 25
y = 25 * x  # (so, if x != w, y = 25, and if x == w, y = 0)
y = 25 * x + 1
z = z * y
  = z * (25 * x + 1)
  = ((z_0 % 26 + 11) == w) ? z : 26 * z
y = 0
y = w
y = w + 6
y = (w + 6) * x
z = z + y
  = ((z_0 % 26 + 11) == w) ? z : (26 * z + w + 6)


if (z_0 % 26 + 11) == w:
    z = z
else:
    z = 26 * z + w + 6


Complete, symbolic
    if (z_0 % 26 + 11) != w:
        z = 26 * math.trunc(z_0 / 1) + w + 6
    else:
        z = math.trunc(z_0 / 1)


Generic
    if (z_0 % 26 + AA) != w:
        z = 26 * math.trunc(z_0 / BB) + w + CC
    else:
        z = math.trunc(z_0 / BB)

    WHERE
        BB = `div z NUM` # line 5
        AA = `add x NUM` # line 6
        CC = `add y NUM` # line 16
    (yes, they're out of order.  Deal with it)


Adapted for Block 0:
    Initial:
        z_0 starts zeroed out
        AA = 11, BB = 1, CC = 6

    if 11 != a:
        z = a + 6
    else:
        z = 0


== Block 1 ==
Adapted for Block 1:
    Config: [11, 1, 12]

    if (z_1 % 26 + 11) != b:
        z = 26 * z_1 + b + 12
    else:
        z = z_1

Incorporating Block 0:

`a` is never `11` (ranges 1-9), so Block 1 gives: `z_1 = a + 6`

    if ((a + 6) % 26 + 11) != b:
        z = 26 * (a + 6) + b + 12
        = 26 * a + 156 + b + 12
        = 26 * a + b + 168
        = 26 * a + b + 26*6 + 12
    else:
        z = a + 6

We're dealing with single digits, so `(a + 6) % 26` is the same as `a + 6`

    if (a + 6 + 11) != b:
        z = 26 * a + b + 168
    else:
        z = a + 6

Simplify

    if (a + 17) != b:
        z = 26 * a + b + 168
    else:
        z = a + 6

Again, working with digits, `a + 17` is far greater than `b` could ever be,
so we have the first case:

    z = 26 * a + b + 168




== Block 2 ==
Adapted for Block 2:
    Config: [15, 1, 8]

    if (z_2 % 26 + 15) != c:
        z = 26 * z_2 + c + 8
    else:
        z = z_2

Incorporating Block 1:

Output from Block 1: `z_2 = 26 * a + b + 168`
`168 == 26*6 + 12`

    if ( (26 * a + b + 168) % 26 + 15 ) != c:
        z = 26 * (26 * a + b + 168) + c + 8
    else:
        z = 26 * a + b + 168

Since `26 * X % 26` is always, `0`, we can simplify

    if ( (b + 168) % 26 + 15 ) != c:
        z = 26 * (26 * a + b + 168) + c + 8
    else:
        z = 26 * a + b + 168

Again, adding `15` will far exceed any individual digit, so it won't equal `c`
and we have the first case

    z = 26 * (26 * a + b + 168) + c + 8
      = 676 * a + 26 * b + 4368 + c + 8
    z = 676*a + 26*b + c + 4376
      = 26*26*a + 26*b + c + 26*168 + 8
      = 26*26*z + 26*b + c + 26*26*6 + 26*12 + 8



== Block 3 ==
Adapted for Block 3:
    Config: [-11, 26, 7]

    if (z_3 % 26 - 11) != d:
        z = 26 * math.trunc(z_3 / 26) + d + 7
    else:
        z = math.trunc(z_3 / 26)

Incorporating Block 2:
Output from Block 2: `z_3 = 676*a + 26*b + c + 4376`
`4376 == 26*26*6 + 26*12 + 8`

    if ( (676*a + 26*b + c + 4376) % 26 - 11 ) != d:
        z = 26 * math.trunc((676*a + 26*b + c + 4376) / 26) + d + 7
          = 26 * math.trunc(26*a + b + c/26 + 4376/26) + d + 7
    else:
        z = math.trunc((676*a + 26*b + c + 4376) / 26)
          = math.trunc(26*a + b + c/26 + 4376/26)




== Block 4 ==
Adapted for Block 4:
    Config: [15, 1, 7]

    if (z_4 % 26 + 15) != e:
        z = 26 * z_4 + e + 7
    else:
        z = z_4


== Block 5 ==
Adapted for Block 5:
    Config: [15, 1, 12]

    if (z_5 % 26 + 15) != f:
        z = 26 * z_5 + f + 12
    else:
        z = z_5



== Block 6 ==
Adapted for Block 6:
    Config: [14, 1, 2]

    if (z_6 % 26 + 14) != g:
        z = 26 * z_6 + g + 2
    else:
        z = z_6



== Block 7 ==
Adapted for Block 7:
    Config: [-7, 26, 15]

    if (z_7 % 26 - 7) != h:
        z = 26 * math.trunc(z_7 / 26) + h + 15
    else:
        z = math.trunc(z_7 / 26)



== Block 8 ==
Adapted for Block 8:
    Config: [12, 1, 4]

    if (z_8 % 26 + 12) != i:
        z = 26 * z_8 + i + 4
    else:
        z = z_8



== Block 9 ==
Adapted for Block 9:
    Config: [-6, 26, 5]

    if (z_0 % 26 - 6) != j:
        z = 26 * math.trunc(z_0 / 26) + j + 5
    else:
        z = math.trunc(z_0 / 26)



== Block 10 ==
Adapted for Block 10:
    Config: [-10, 26, 12]

    if (z_0 % 26 - 10) != k:
        z = 26 * math.trunc(z_0 / 26) + k + 12
    else:
        z = math.trunc(z_0 / 26)



== Block 11 ==
Adapted for Block 11:
    Config: [-15, 26, 11]

    if (z_0 % 26 - 15) != l:
        z = 26 * math.trunc(z_0 / 26) + l + 11
    else:
        z = math.trunc(z_0 / 26)



== Block 12 ==
Adapted for Block 12:
    Config: [-9, 26, 13]

    if (z_0 % 26 - 9) != m:
        z = 26 * math.trunc(z_0 / 26) + m + 13
    else:
        z = math.trunc(z_0 / 26)






== Block 13 ==
Adapted for Block 13:
    Config: [0, 26, 7]

    if (z_0 % 26) != n:
        z = 26 * math.trunc(z_0 / 26) + n + 7
    else:
        z = math.trunc(z_0 / 26)


Need z == 0:
    if (z_0 % 26) != n:
        0 = 26 * math.trunc(z_0 / 26) + n + 7
    else
        0 == z_0














